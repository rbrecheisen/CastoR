% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/castorapiclient.R
\name{CastorApiClient}
\alias{CastorApiClient}
\title{Title: API client for Castor EDC}
\description{
Title: API client for Castor EDC

Title: API client for Castor EDC
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_token_url}}{URL endpoint to retrieve access token for connecting to API}

\item{\code{api_base_url}}{Base URL endpoint for constructing other endpoint URLs}

\item{\code{token}}{Token string}

\item{\code{studies}}{Object that holds list of studies available to current user}

\item{\code{nr_retries}}{Number of times to retry if a REST call fails}

\item{\code{retry_waiting_time}}{Time in seconds to wait before retrying a REST call after failing}

\item{\code{data}}{Dataframe that holds the study data records}

\item{\code{field_defs}}{Dataframe that holds the field definitions}

\item{\code{optiongroups}}{Dataframe that holds the option groups
Title: Initializes Castor API client}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CastorApiClient-new}{\code{CastorApiClient$new()}}
\item \href{#method-CastorApiClient-connect}{\code{CastorApiClient$connect()}}
\item \href{#method-CastorApiClient-is_connected}{\code{CastorApiClient$is_connected()}}
\item \href{#method-CastorApiClient-get_studies}{\code{CastorApiClient$get_studies()}}
\item \href{#method-CastorApiClient-get_study_name_by_id}{\code{CastorApiClient$get_study_name_by_id()}}
\item \href{#method-CastorApiClient-get_study_id_by_name}{\code{CastorApiClient$get_study_id_by_name()}}
\item \href{#method-CastorApiClient-get_study_data_as_csv}{\code{CastorApiClient$get_study_data_as_csv()}}
\item \href{#method-CastorApiClient-load_csv_data}{\code{CastorApiClient$load_csv_data()}}
\item \href{#method-CastorApiClient-get_field_type}{\code{CastorApiClient$get_field_type()}}
\item \href{#method-CastorApiClient-set_dataframe_data_types}{\code{CastorApiClient$set_dataframe_data_types()}}
\item \href{#method-CastorApiClient-get_study_data}{\code{CastorApiClient$get_study_data()}}
\item \href{#method-CastorApiClient-save_records}{\code{CastorApiClient$save_records()}}
\item \href{#method-CastorApiClient-save_field_defs}{\code{CastorApiClient$save_field_defs()}}
\item \href{#method-CastorApiClient-save_na_counts}{\code{CastorApiClient$save_na_counts()}}
\item \href{#method-CastorApiClient-clone}{\code{CastorApiClient$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-new}{}}}
\subsection{Method \code{new()}}{
Initializes the Castor API client with a client ID and secret.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$new(
  client_id,
  client_secret,
  nr_retries = 5,
  retry_waiting_time = 1
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client_id}}{API client ID}

\item{\code{client_secret}}{API client secret}

\item{\code{nr_retries}}{Number of time to retry API endpoint calls}

\item{\code{retry_waiting_time}}{Time in seconds before trying to call API endpoint again}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-connect"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-connect}{}}}
\subsection{Method \code{connect()}}{
Makes connection with API using provided client ID and secret.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$connect(client_id, client_secret, token_url)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client_id}}{API client ID}

\item{\code{client_secret}}{API client secret}

\item{\code{token_url}}{URL endpoint for retrieving API access token}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-is_connected"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-is_connected}{}}}
\subsection{Method \code{is_connected()}}{
Checks API token is not NULL and returns TRUE/FALSE
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$is_connected()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_studies"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_studies}{}}}
\subsection{Method \code{get_studies()}}{
Retrieves all Castor studies for which the user, associated with the client ID
and secret, has access.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_studies()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_study_name_by_id"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_study_name_by_id}{}}}
\subsection{Method \code{get_study_name_by_id()}}{
Gets study name for given study ID
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_study_name_by_id(study_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{study_id}}{Study ID}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_study_id_by_name"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_study_id_by_name}{}}}
\subsection{Method \code{get_study_id_by_name()}}{
]
Gets study ID for given study name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_study_id_by_name(study_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{study_name}}{Study name}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_study_data_as_csv"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_study_data_as_csv}{}}}
\subsection{Method \code{get_study_data_as_csv()}}{
Retrieves study data depending on the type of data requested. Possibilities
are field definitions, option groups or records.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_study_data_as_csv(study_id, data_type, tmp_dir = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{study_id}}{Study ID}

\item{\code{data_type}}{Type of study data requested. Must be "structure", "optiongroups"
or "data", where data are the records}

\item{\code{tmp_dir}}{Optional temporary directory where to save the retrieved data (in
CSV format)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-load_csv_data"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-load_csv_data}{}}}
\subsection{Method \code{load_csv_data()}}{
Loads string-encoded CSV data (retrieved with get_study_data_as_csv()) and returns
the data as a data frame
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$load_csv_data(csv_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{csv_data}}{String-encoded CSV data}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_field_type"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_field_type}{}}}
\subsection{Method \code{get_field_type()}}{
Gets field type for given field variable name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_field_type(field_name, field_defs)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field_name}}{Field variable name}

\item{\code{field_defs}}{Field definitions (as retrieved by get_study_data_as_csv())}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-set_dataframe_data_types"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-set_dataframe_data_types}{}}}
\subsection{Method \code{set_dataframe_data_types()}}{
Updates column data types in given data frame using the given field definitions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$set_dataframe_data_types(df, field_defs)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{Data frame to be updated}

\item{\code{field_defs}}{Field definitions (as retrieved by get_study_data_as_csv())}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-get_study_data"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-get_study_data}{}}}
\subsection{Method \code{get_study_data()}}{
Gets study data as data frame by retrieving field definitions, option groups and record data
as string-encoded CSV data and merging these together to form a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$get_study_data(study_name, tmp_dir = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{study_name}}{Study name}

\item{\code{tmp_dir}}{Optional temporary directory where to save the retrieved data (in
CSV format)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-save_records"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-save_records}{}}}
\subsection{Method \code{save_records()}}{
Saves study data dataframe to file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$save_records(
  file_path = file.path(path.expand("~"), "records.Rdata")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Target file path where to save the .Rdata file (default $HOME)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-save_field_defs"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-save_field_defs}{}}}
\subsection{Method \code{save_field_defs()}}{
Saves field definitions (including option groups) to file. Table is in long format
with columns "Field Variable Name", "Field Type", "Option Group Name", "Option Name", "Option Value"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$save_field_defs(
  file_path = file.path(path.expand("~"), "field_defs.Rdata")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Target file path where to save the .Rdata file (default $HOME)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-save_na_counts"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-save_na_counts}{}}}
\subsection{Method \code{save_na_counts()}}{
Saves NA counts per column to file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$save_na_counts(
  file_path = file.path(path.expand("~"), "na_counts.Rdata")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Target file path where to save the .Rdata file (default $HOME)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CastorApiClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CastorApiClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CastorApiClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
